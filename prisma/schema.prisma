generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ContractFantasy {
  id                    String           @id
  signed                DateTime
  waived                DateTime?
  player_id             String
  successor_id          String?          @unique
  team_id               String
  Player                Player           @relation(fields: [player_id], references: [id])
  ContractFantasy       ContractFantasy? @relation("ContractFantasyToContractFantasy", fields: [successor_id], references: [id])
  other_ContractFantasy ContractFantasy? @relation("ContractFantasyToContractFantasy")
  TeamFantasy           TeamFantasy      @relation(fields: [team_id], references: [id])
}

model GamePlayer {
  id        String   @id
  date      DateTime
  minutes   Int
  fga       Int
  fgm       Int
  tpa       Int
  tpm       Int
  fta       Int
  ftm       Int
  oreb      Int
  dreb      Int
  reb       Int
  ast       Int
  stl       Int
  blk       Int
  to        Int
  pf        Int
  pts       Int
  player_id String
  Player    Player   @relation(fields: [player_id], references: [id])
}

model GameTeam {
  id      String   @id
  date    DateTime
  fga     Int
  fgm     Int
  tpa     Int
  tpm     Int
  fta     Int
  ftm     Int
  oreb    Int
  dreb    Int
  reb     Int
  ast     Int
  stl     Int
  blk     Int
  to      Int
  pf      Int
  pts     Int
  team_id String
  Team    Team     @relation(fields: [team_id], references: [id])
}

model Player {
  id                String             @id
  salary            Int
  dob               DateTime
  name_first        String
  name_last         String
  team_id           String
  ContractFantasy   ContractFantasy[]
  GamePlayer        GamePlayer[]
  Team              Team               @relation(fields: [team_id], references: [id])
  PlayerStatAverage PlayerStatAverage?
  PlayerStatTotal   PlayerStatTotal?
}

model PlayerStatAverage {
  id            String   @id
  minutes       Float
  fga           Float
  fgm           Float
  tpa           Float
  tpm           Float
  fta           Float
  ftm           Float
  oreb          Float
  dreb          Float
  reb           Float
  ast           Float
  stl           Float
  blk           Float
  to            Float
  pf            Float
  pts           Float
  latest_update DateTime
  player_id     String   @unique
  Player        Player   @relation(fields: [player_id], references: [id])
}

model PlayerStatTotal {
  id            String   @id
  minutes       Int
  fga           Int
  fgm           Int
  tpa           Int
  tpm           Int
  fta           Int
  ftm           Int
  oreb          Int
  dreb          Int
  reb           Int
  ast           Int
  stl           Int
  blk           Int
  to            Int
  pf            Int
  pts           Int
  latest_update DateTime
  player_id     String   @unique
  Player        Player   @relation(fields: [player_id], references: [id])
}

model PlayerTotalUpdate {
  id        Int      @id @default(autoincrement())
  timestamp DateTime
}

model Team {
  id       String     @id
  name     String
  city     String
  GameTeam GameTeam[]
  Player   Player[]
}

model TeamFantasy {
  id              String            @id
  name            String
  ContractFantasy ContractFantasy[]
}

model PlayerAverageUpdate {
  id        Int      @id @default(autoincrement())
  timestamp DateTime
}
